# update_pdf_incremental.py (robust, t∆∞∆°ng th√≠ch nhi·ªÅu phi√™n b·∫£n pikepdf)
from reportlab.pdfgen import canvas
from reportlab.lib.pagesizes import A4
from reportlab.pdfbase.ttfonts import TTFont
from reportlab.pdfbase import pdfmetrics
import pikepdf
from pathlib import Path
import sys

# --- C·∫•u h√¨nh ƒë∆∞·ªùng d·∫´n (ch·ªânh theo m√°y b·∫°n) ---
SIGNED_FILE = r"D:\BAITAP\BT_ATBMTT\BT2_CHUKYSO_SCURITY\signed_output.pdf"
UPDATED_FILE = r"D:\BAITAP\BT_ATBMTT\BT2_CHUKYSO_SCURITY\signed_with_overlay.pdf"
OVERLAY_FILE = r"D:\BAITAP\BT_ATBMTT\BT2_CHUKYSO_SCURITY\overlay_layer.pdf"

# --- ƒêƒÉng k√Ω font Unicode ---
FONT_PATH = Path("C:/Windows/Fonts/arial.ttf")
try:
    pdfmetrics.registerFont(TTFont("ArialUnicode", str(FONT_PATH)))
except Exception:
    # n·∫øu font kh√¥ng t√¨m th·∫•y, v·∫´n ti·∫øp t·ª•c (reportlab s·∫Ω d√πng font m·∫∑c ƒë·ªãnh)
    pass

print("pikepdf version:", getattr(pikepdf, "__version__", "unknown"))
print("Python:", sys.version.splitlines()[0])

# --- T·∫°o overlay PDF (incremental layer) ---
print("üîπ T·∫°o overlay layer (overlay_layer.pdf)...")
c = canvas.Canvas(OVERLAY_FILE, pagesize=A4)
c.setFont("ArialUnicode", 14)
c.setFillColorRGB(0.1, 0.4, 0.8)
c.drawString(60, 320, "Xin ch√†o, ƒë√¢ l√† ph·∫ßn ƒë∆∞·ª£c th√™m v√†o trong file (Incremental Update)")
c.save()
print("‚úÖ ƒê√£ t·∫°o:", OVERLAY_FILE)

# --- M·ªü PDF ƒë√£ k√Ω v√† ch√®n overlay ---
print("üîπ M·ªü PDF ƒë√£ k√Ω v√† th√™m overlay (kh√¥ng ph√° ch·ªØ k√Ω)...")
pdf = pikepdf.Pdf.open(SIGNED_FILE)
overlay = pikepdf.Pdf.open(OVERLAY_FILE)

# √°p overlay l√™n trang cu·ªëi c√πng
pdf.pages[-1].add_overlay(overlay.pages[0])
print("‚úÖ Overlay ƒë√£ ƒë∆∞·ª£c ch√®n v√†o trang cu·ªëi.")

# --- L·∫•y Root / Catalog theo nhi·ªÅu c√°ch (robust) ---
def get_root_dict(pdf_obj):
    """
    Tr·∫£ v·ªÅ Catalog dictionary (Root) theo phi√™n b·∫£n pikepdf.
    """
    # 1) Thu·ªôc t√≠nh 'root' (c≈©)
    if hasattr(pdf_obj, "root"):
        root = pdf_obj.root
        print("Info: d√πng pdf.root")
        return root
    # 2) open_root() (m·ªôt s·ªë phi√™n b·∫£n)
    if hasattr(pdf_obj, "open_root"):
        try:
            root = pdf_obj.open_root()
            print("Info: d√πng pdf.open_root()")
            return root
        except Exception:
            pass
    # 3) trailer '/Root'
    try:
        tr = pdf_obj.trailer
        if "/Root" in tr:
            root = tr["/Root"]
            print("Info: d√πng pdf.trailer['/Root']")
            return root
    except Exception:
        pass
    # 4) th·ª≠ attribute 'Root'
    if hasattr(pdf_obj, "Root"):
        try:
            root = getattr(pdf_obj, "Root")
            print("Info: d√πng pdf.Root")
            return root
        except Exception:
            pass
    raise RuntimeError("Kh√¥ng th·ªÉ l·∫•y Catalog (/Root) t·ª´ PDF v·ªõi pikepdf hi·ªán t·∫°i.")

# --- T·∫°o DSS dictionary (m√¥ ph·ªèng) ---
print("üîπ Th√™m tr∆∞·ªùng /DSS m√¥ ph·ªèng v√†o Catalog...")
try:
    root = get_root_dict(pdf)
except RuntimeError as e:
    print("ERROR: ", e)
    pdf.close()
    overlay.close()
    raise

# chu·∫©n b·ªã DSS dict
dss = pikepdf.Dictionary()
dss[pikepdf.Name("/Type")] = pikepdf.Name("/DSS")
dss[pikepdf.Name("/Note")] = pikepdf.String("Simulated DSS block (Certs/OCSP/CRL placeholders)")

# g√°n v√†o Catalog (root)
root[pikepdf.Name("/DSS")] = dss

# --- L∆∞u file v·ªõi incremental update (t∆∞∆°ng th√≠ch PikePDF 10) ---
print("üîπ L∆∞u PDF m·ªõi theo c√°ch t∆∞∆°ng th√≠ch PikePDF 10 (t·∫°o revision m·ªõi)...")

try:
    # D√πng save() b√¨nh th∆∞·ªùng, PikePDF >=10 s·∫Ω t·ª± x·ª≠ l√Ω c·∫•u tr√∫c xref
    pdf.save(UPDATED_FILE)
    print(f"‚úÖ Ho√†n t·∫•t. File ƒë√£ l∆∞u: {UPDATED_FILE}")
except Exception as e:
    print("‚ùå L·ªói khi l∆∞u file:", e)
finally:
    pdf.close()
    overlay.close()


