# verify_pdf_signature_v2.1.py
from pyhanko.sign import validation
from pyhanko.pdf_utils.reader import PdfFileReader
from pyhanko.keys import load_cert_from_pemder
from pyhanko_certvalidator import ValidationContext
from pyhanko.sign.diff_analysis import ModificationLevel
from datetime import datetime, timezone, timedelta
import hashlib, os, sys

PDF_PATH = r"D:\BAITAP\BT_ATBMTT\BT2_CHUKYSO_SCURITY\signed_output.pdf"
CERT_PATH = r"D:\BAITAP\BT_ATBMTT\BT2_CHUKYSO_SCURITY\keys\signer_cert.pem"
LOG_PATH = r"D:\BAITAP\BT_ATBMTT\BT2_CHUKYSO_SCURITY\Scripts\verify_KQ_ok.txt"

def write_log(msg):
    print(msg)
    with open(LOG_PATH, "a", encoding="utf-8") as lf:
        lf.write(msg + "\n")

open(LOG_PATH, "w").close()
write_log("=== KI·ªÇM TRA X√ÅC TH·ª∞C CH·ªÆ K√ù PDF ===")
write_log(f"Th·ªùi gian ki·ªÉm th·ª≠: {datetime.now()}")
write_log(f"File ki·ªÉm tra: {PDF_PATH}")
write_log("====================================")

# --- B1: T·∫°o Validation Context ---
vc = ValidationContext(
    trust_roots=[load_cert_from_pemder(CERT_PATH)],
    allow_fetching=False
)

# --- B2: ƒê·ªçc PDF ---
with open(PDF_PATH, "rb") as f:
    reader = PdfFileReader(f)
    sigs = reader.embedded_signatures

    if not sigs:
        write_log("‚ùå Kh√¥ng t√¨m th·∫•y ch·ªØ k√Ω n√†o trong file.")
        sys.exit(1)

    sig = sigs[0]
    name = sig.field_name or "DigitalSign_1"
    write_log(f"üîç Ph√°t hi·ªán ch·ªØ k√Ω: {name}")

    sig_dict = sig.sig_object
    byte_range = sig_dict.get("/ByteRange")
    contents = sig_dict.get("/Contents")
    write_log(f"/ByteRange: {byte_range}")
    write_log(f"/Contents length: {len(contents)} bytes")

    # --- B3: T√≠nh hash SHA-256 ---
    f.seek(0)
    data = f.read()
    try:
        r0, l0, r1, l1 = map(int, byte_range)
        segment = data[r0:r0+l0] + data[r1:r1+l1]
        digest = hashlib.sha256(segment).hexdigest()
        write_log(f"SHA-256(ByteRange): {digest[:64]}... ‚úÖ")
    except Exception as e:
        write_log(f"‚ö†Ô∏è L·ªói t√≠nh hash: {e}")

    # --- B4: X√°c th·ª±c ch·ªØ k√Ω ---
    write_log("====================================")
    write_log("üîí ƒêang x√°c th·ª±c ch·ªØ k√Ω...")
    status = validation.validate_pdf_signature(sig, vc)
    write_log(status.pretty_print_details())

    # --- B5: Th√¥ng tin ch·ª©ng th∆∞ ---
    cert = status.signing_cert
    if cert:
        subj = cert.subject.human_friendly
        write_log("\nüìú Th√¥ng tin ch·ª©ng th∆∞ ng∆∞·ªùi k√Ω:")
        write_log(f"  Ch·ªß th·ªÉ: {subj}")

        sha1_fp = cert.sha1_fingerprint
        sha256_fp = cert.sha256_fingerprint

        # ƒë·∫£m b·∫£o kh√¥ng l·ªói .hex()
        if hasattr(sha1_fp, "hex"):
            sha1_fp = sha1_fp.hex()
        if hasattr(sha256_fp, "hex"):
            sha256_fp = sha256_fp.hex()

        write_log(f"  SHA1 fingerprint: {sha1_fp}")
        write_log(f"  SHA256 fingerprint: {sha256_fp}")
    else:
        write_log("‚ö†Ô∏è Kh√¥ng ƒë·ªçc ƒë∆∞·ª£c ch·ª©ng th∆∞ ng∆∞·ªùi k√Ω.")

    # --- B6: Th·ªùi gian k√Ω ---
    if status.signer_reported_dt:
        vn_time = status.signer_reported_dt.astimezone(timezone(timedelta(hours=7)))
        write_log(f"üïí Th·ªùi gian k√Ω (VN): {vn_time}")
    else:
        write_log("‚ö†Ô∏è Kh√¥ng c√≥ timestamp RFC3161 (k√Ω offline).")

    # --- B7: Ph√°t hi·ªán s·ª≠a ƒë·ªïi ---
    mod = getattr(status, "modification_level", None)
    if mod == ModificationLevel.NONE:
        write_log("‚úÖ File ch∆∞a b·ªã ch·ªânh s·ª≠a k·ªÉ t·ª´ khi k√Ω.")
    elif mod == ModificationLevel.FORM_FILLING:
        write_log("‚ö†Ô∏è File c√≥ thay ƒë·ªïi nh·ªè (ƒëi·ªÅn form).")
    else:
        write_log("‚ùå File ƒë√£ b·ªã thay ƒë·ªïi sau khi k√Ω!")

# --- B8: K·∫øt lu·∫≠n ---
write_log("====================================")

# Ki·ªÉm tra s·ª≠a ƒë·ªïi
if mod == ModificationLevel.NONE:
    if status.bottom_line:
        write_log("‚úÖ K·∫æT LU·∫¨N: CH·ªÆ K√ù H·ª¢P L·ªÜ - T√ÄI LI·ªÜU NGUY√äN V·∫∏N.")
    else:
        # Tr∆∞·ªùng h·ª£p self-signed nh∆∞ng kh√¥ng b·ªã ch·ªânh s·ª≠a
        write_log("‚úÖ K·∫æT LU·∫¨N: CH·ªÆ K√ù T·ª∞ K√ù (SELF-SIGNED) - FILE NGUY√äN V·∫∏N.")
        write_log("‚ö†Ô∏è L∆∞u √Ω: Ch·ª©ng th∆∞ kh√¥ng thu·ªôc CA tin c·∫≠y, nh∆∞ng d·ªØ li·ªáu kh√¥ng b·ªã thay ƒë·ªïi.")
else:
    write_log("‚ùå CH·ªÆ K√ù KH√îNG H·ª¢P L·ªÜ ho·∫∑c FILE B·ªä S·ª¨A ƒê·ªîI.")
    write_log("‚ö†Ô∏è L√Ω do th∆∞·ªùng g·∫∑p: ch·ª©ng th∆∞ t·ª± k√Ω (self-signed), kh√¥ng c√≥ nonRepudiation, ho·∫∑c kh√¥ng thu·ªôc CA tin c·∫≠y.")

write_log(f"\nüìÑ Log ƒë√£ l∆∞u t·∫°i: {LOG_PATH}")

