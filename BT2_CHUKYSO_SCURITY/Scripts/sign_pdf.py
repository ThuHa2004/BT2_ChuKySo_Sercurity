# sign_pdf.py (s·ª≠a ƒë·ªÉ h·ªó tr·ª£ nhi·ªÅu phi√™n b·∫£n pyHanko / fallback b·∫±ng pikepdf)
from datetime import datetime
from pyhanko.sign import signers, fields
from pyhanko.stamp import TextStampStyle
from pyhanko.pdf_utils import images
from pyhanko.pdf_utils.text import TextBoxStyle
from pyhanko.pdf_utils.layout import SimpleBoxLayoutRule, AxisAlignment, Margins
from pyhanko.sign.general import load_cert_from_pemder
from pyhanko_certvalidator import ValidationContext
from pyhanko.pdf_utils.incremental_writer import IncrementalPdfFileWriter
from pyhanko.sign.fields import SigFieldSpec
import os
import shutil
import tempfile

# === ƒê∆Ø·ªúNG D·∫™N C·∫§U H√åNH (ch·ªânh theo m√°y b·∫°n) ===
PDF_INPUT = r"D:\BAITAP\BT_ATBMTT\BT2_CHUKYSO_SCURITY\original.pdf"
PDF_OUTPUT = r"D:\BAITAP\BT_ATBMTT\BT2_CHUKYSO_SCURITY\signed_output.pdf"
KEY_PATH = r"D:\BAITAP\BT_ATBMTT\BT2_CHUKYSO_SCURITY\keys\signer_key.pem"
CERT_PATH = r"D:\BAITAP\BT_ATBMTT\BT2_CHUKYSO_SCURITY\keys\signer_cert.pem"
SIGN_IMG = r"D:\BAITAP\BT_ATBMTT\BT2_CHUKYSO_SCURITY\Scripts\signature_image.png"

def step(title):
    print(f"üîπ {title}")

def try_open_writer(fp_path):
    """
    Th·ª≠ m·ªü IncrementalPdfFileWriter theo nhi·ªÅu c√°ch:
     1) v·ªõi allow_hybrid_xrefs kwarg (n·∫øu h·ªó tr·ª£)
     2) kh√¥ng kwarg r·ªìi g√°n thu·ªôc t√≠nh n·ªôi b·ªô (n·∫øu c√≥)
     3) fallback: rewrite b·∫±ng pikepdf r·ªìi m·ªü l·∫°i (n·∫øu pikepdf c√≥)
    Tr·∫£ v·ªÅ: (writer, fileobj) - writer l√† IncrementalPdfFileWriter,
            fileobj l√† file object ƒëang ƒë∆∞·ª£c m·ªü (ƒë·ªÉ ƒë√≥ng sau)
    N√©m RuntimeError n·∫øu kh√¥ng th·ªÉ m·ªü an to√†n.
    """
    # M·ªü file nh·ªã ph√¢n
    f = open(fp_path, "rb")
    # 1) th·ª≠ truy·ªÅn kwarg
    try:
        writer = IncrementalPdfFileWriter(f, allow_hybrid_xrefs=True)
        return writer, f
    except TypeError:
        # kh√¥ng h·ªó tr·ª£ kwarg -> ƒë√≥ng file v√† ti·∫øp
        f.close()

    # 2) m·ªü kh√¥ng kwarg, th·ª≠ g√°n thu·ªôc t√≠nh n·∫øu t·ªìn t·∫°i
    f = open(fp_path, "rb")
    writer = IncrementalPdfFileWriter(f)
    # ki·ªÉm tra c√°c t√™n thu·ªôc t√≠nh kh·∫£ dƒ©
    attr_names = ("allow_hybrid_xrefs", "allow_hybrid_xref", "_allow_hybrid_xrefs", "allow_hybrid")
    for a in attr_names:
        if hasattr(writer, a):
            try:
                setattr(writer, a, True)
                return writer, f
            except Exception:
                # n·∫øu g√°n th·∫•t b·∫°i, ti·∫øp t·ª•c th·ª≠ nh·ªØng t√™n kh√°c
                pass
    # n·∫øu t·ªõi ƒë√¢y v·∫´n ch∆∞a b·∫≠t ƒë∆∞·ª£c -> ƒë√≥ng file v√† th·ª≠ rewrite
    f.close()

    # 3) fallback: c·ªë g·∫Øng rewrite file b·∫±ng pikepdf (lo·∫°i b·ªè hybrid xref)
    try:
        import pikepdf
    except Exception as e:
        raise RuntimeError(
            "Kh√¥ng th·ªÉ enable hybrid xrefs v√† 'pikepdf' kh√¥ng ƒë∆∞·ª£c c√†i. "
            "C√†i pikepdf b·∫±ng 'pip install pikepdf' ho·∫∑c n√¢ng c·∫•p pyHanko."
        ) from e

    # t·∫°o temp file rewrite
    tmp_dir = tempfile.mkdtemp(prefix="pdf_rewrite_")
    tmp_out = os.path.join(tmp_dir, "rewritten.pdf")
    try:
        # m·ªü v√† l∆∞u l·∫°i (pikepdf s·∫Ω rebuild xref)
        pdf = pikepdf.Pdf.open(fp_path)
        pdf.save(tmp_out)
        pdf.close()
        # m·ªü rewritten file
        f2 = open(tmp_out, "rb")
        writer = IncrementalPdfFileWriter(f2)
        return writer, f2
    except Exception as e:
        # d·ªçn d·∫πp v√† b√°o l·ªói
        try:
            if os.path.exists(tmp_out):
                os.remove(tmp_out)
            shutil.rmtree(tmp_dir, ignore_errors=True)
        except Exception:
            pass
        raise RuntimeError("Kh√¥ng th·ªÉ rewrite PDF ƒë·ªÉ lo·∫°i b·ªè hybrid xref.") from e

def main():
    step("B1: M·ªü file PDF g·ªëc v√† chu·∫©n b·ªã v√πng ch·ªØ k√Ω.")
    try:
        writer, fp = try_open_writer(PDF_INPUT)
    except RuntimeError as e:
        print("L·ªñI: ", e)
        return

    try:
        # L·∫•y s·ªë trang
        try:
            total_pages = int(writer.root["/Pages"]["/Count"])
        except Exception:
            total_pages = 1
        target_page = total_pages - 1

        # T·∫°o v√πng ch·ªØ k√Ω (Signature field) - v·ªã tr√≠ b·∫°n c√≥ th·ªÉ ch·ªânh
        sig_field = SigFieldSpec(
            sig_field_name="DigitalSign_1",
            box=(280, 160, 580, 260),
            on_page=target_page
        )
        fields.append_signature_field(writer, sig_field)

        step("B2: T·∫°o signer RSA (2048-bit, SHA-256).")
        signer = signers.SimpleSigner.load(KEY_PATH, CERT_PATH, key_passphrase=None)
        vc = ValidationContext(trust_roots=[load_cert_from_pemder(CERT_PATH)])

        # Hi·ªÉn th·ªã ch·ªØ k√Ω (·∫£nh + text) - kh√¥ng vi·ªÅn (border_width=0)
        step("B3: T·∫°o ·∫£nh ch·ªØ k√Ω v√† th√¥ng tin m√¥ t·∫£.")
        sign_image = images.PdfImage(SIGN_IMG)

        layout_img = SimpleBoxLayoutRule(
            x_align=AxisAlignment.ALIGN_MIN,
            y_align=AxisAlignment.ALIGN_MID,
            margins=Margins(right=20)
        )
        layout_text = SimpleBoxLayoutRule(
            x_align=AxisAlignment.ALIGN_MIN,
            y_align=AxisAlignment.ALIGN_MID,
            margins=Margins(left=160)
        )

        text_style = TextBoxStyle(font_size=12)
        current_date = datetime.now().strftime("%d/%m/%Y %H:%M")
        sign_info = (
            "MSSV: K225480106009\n"
            "SDT: 0362995977\n"
            f"Ng√†y k√Ω: {current_date}\n"
        )

        stamp = TextStampStyle(
            stamp_text=sign_info,
            background=sign_image,
            background_layout=layout_img,
            inner_content_layout=layout_text,
            text_box_style=text_style,
            border_width=0,
            background_opacity=1.0
        )

        step("B4: Thi·∫øt l·∫≠p metadata ch·ªØ k√Ω.")
        meta = signers.PdfSignatureMetadata(
            field_name="DigitalSign_1",
            reason="K√Ω n·ªôp b√†i th·ª±c h√†nh: Ch·ªØ k√Ω s·ªë trong PDF",
            location="Vi·ªát Nam",
            md_algorithm="sha256"
        )

        step("B5: Th·ª±c hi·ªán k√Ω s·ªë v√† ch√®n PKCS#7 v√†o PDF.")
        pdf_signer = signers.PdfSigner(
            signature_meta=meta,
            signer=signer,
            stamp_style=stamp
        )

        with open(PDF_OUTPUT, "wb") as signed_out:
            pdf_signer.sign_pdf(writer, output=signed_out)

        step("B6: Ghi incremental update v√† ho√†n t·∫•t qu√° tr√¨nh k√Ω.")
        print(f"‚úÖ ƒê√£ k√Ω PDF th√†nh c√¥ng! File l∆∞u t·∫°i: {PDF_OUTPUT}")

    finally:
        # ƒë√≥ng file object writer ƒëang d√πng
        try:
            fp.close()
        except Exception:
            pass

if __name__ == "__main__":
    main()
